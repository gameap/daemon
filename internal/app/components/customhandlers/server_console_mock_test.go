// Code generated by MockGen. DO NOT EDIT.
// Source: server_console.go
//
// Generated by this command:
//
//	mockgen -source=server_console.go -destination=server_console_mock_test.go -package=customhandlers_test
//

// Package customhandlers_test is a generated GoMock package.
package customhandlers_test

import (
	context "context"
	io "io"
	reflect "reflect"

	domain "github.com/gameap/daemon/internal/app/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockoutputReader is a mock of outputReader interface.
type MockoutputReader struct {
	ctrl     *gomock.Controller
	recorder *MockoutputReaderMockRecorder
}

// MockoutputReaderMockRecorder is the mock recorder for MockoutputReader.
type MockoutputReaderMockRecorder struct {
	mock *MockoutputReader
}

// NewMockoutputReader creates a new mock instance.
func NewMockoutputReader(ctrl *gomock.Controller) *MockoutputReader {
	mock := &MockoutputReader{ctrl: ctrl}
	mock.recorder = &MockoutputReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockoutputReader) EXPECT() *MockoutputReaderMockRecorder {
	return m.recorder
}

// GetOutput mocks base method.
func (m *MockoutputReader) GetOutput(ctx context.Context, server *domain.Server, out io.Writer) (domain.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput", ctx, server, out)
	ret0, _ := ret[0].(domain.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockoutputReaderMockRecorder) GetOutput(ctx, server, out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockoutputReader)(nil).GetOutput), ctx, server, out)
}

// MockserverRepo is a mock of serverRepo interface.
type MockserverRepo struct {
	ctrl     *gomock.Controller
	recorder *MockserverRepoMockRecorder
}

// MockserverRepoMockRecorder is the mock recorder for MockserverRepo.
type MockserverRepoMockRecorder struct {
	mock *MockserverRepo
}

// NewMockserverRepo creates a new mock instance.
func NewMockserverRepo(ctrl *gomock.Controller) *MockserverRepo {
	mock := &MockserverRepo{ctrl: ctrl}
	mock.recorder = &MockserverRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserverRepo) EXPECT() *MockserverRepoMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockserverRepo) FindByID(ctx context.Context, id int) (*domain.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*domain.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockserverRepoMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockserverRepo)(nil).FindByID), ctx, id)
}

// MockcommandSender is a mock of commandSender interface.
type MockcommandSender struct {
	ctrl     *gomock.Controller
	recorder *MockcommandSenderMockRecorder
}

// MockcommandSenderMockRecorder is the mock recorder for MockcommandSender.
type MockcommandSenderMockRecorder struct {
	mock *MockcommandSender
}

// NewMockcommandSender creates a new mock instance.
func NewMockcommandSender(ctrl *gomock.Controller) *MockcommandSender {
	mock := &MockcommandSender{ctrl: ctrl}
	mock.recorder = &MockcommandSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcommandSender) EXPECT() *MockcommandSenderMockRecorder {
	return m.recorder
}

// SendInput mocks base method.
func (m *MockcommandSender) SendInput(ctx context.Context, input string, server *domain.Server, out io.Writer) (domain.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendInput", ctx, input, server, out)
	ret0, _ := ret[0].(domain.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendInput indicates an expected call of SendInput.
func (mr *MockcommandSenderMockRecorder) SendInput(ctx, input, server, out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendInput", reflect.TypeOf((*MockcommandSender)(nil).SendInput), ctx, input, server, out)
}
