name: Test

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  test:
    strategy:
      matrix:
        go-version: [1.15.x, 1.16.x, 1.17.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up dependencies
        run: go mod download

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.43.0

      - name: Unit Tests
        run: go test -race -v $(go list ./... | grep -v /test/)

      - name: Functional Tests
        run: go test -p 1 -race ./test/functional/...


  cross_compile:
    strategy:
      matrix:
        targets:
          - "linux/amd64"
    env:
      go: 1.16.x
      GOPROXY: https://proxy.golang.org

    runs-on: ubuntu-latest

    name: Cross Compile for ${{ matrix.targets }}

    steps:
      - name: Set up Go ${{ env.go }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: Install gox
        run: |
          go get github.com/mitchellh/gox
      - name: Cross-compile with gox for ${{ matrix.targets }}
        env:
          GOFLAGS: "-trimpath"
          GOX_ARCHS: "${{ matrix.targets }}"
        run: |
          mkdir build-output
          gox -verbose -osarch "$GOX_ARCHS" -output "build-output/{{.Dir}}_{{.OS}}_{{.Arch}}" ./cmd/gameap-daemon
          gox -verbose -osarch "$GOX_ARCHS" -tags debug -output "build-output/{{.Dir}}_{{.OS}}_{{.Arch}}_debug" ./cmd/gameap-daemon


  test-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.x

      - name: Checkout code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Unit Tests
        run: go test -race -v $(go list ./... | grep -v /test/)
      - name: Functional Tests
        run: go test -list -race ./test/functional/...
